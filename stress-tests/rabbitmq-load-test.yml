config:
  target: 'http://localhost:3003'  # Order Service (RabbitMQ producer)
  phases:
    # Warm-up phase
    - duration: 30
      arrivalRate: 5
      name: "RabbitMQ Warm-up"
    # Ramp-up phase
    - duration: 60
      arrivalRate: 10
      rampTo: 25
      name: "RabbitMQ Ramp-up"
    # Sustained load phase
    - duration: 180
      arrivalRate: 25
      name: "RabbitMQ Sustained load"
    # Peak load phase
    - duration: 60
      arrivalRate: 50
      name: "RabbitMQ Peak load"
    # Cool-down phase
    - duration: 30
      arrivalRate: 5
      name: "RabbitMQ Cool-down"
  
  # Global configuration
  timeout: 45  # Longer timeout for message processing
  
  # Variables for test data
  variables:
    usernames:
      - "rabbitmq_test1@example.com"
      - "rabbitmq_test2@example.com"
      - "rabbitmq_test3@example.com"
      - "message_queue_test@example.com"
    productIds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  
  # Plugins for enhanced reporting
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
    
  # Performance thresholds for message processing
  ensure:
    thresholds:
      - http.response_time.p95: 3000  # 95% of requests should complete within 3s (message processing)
      - http.response_time.p99: 5000  # 99% of requests should complete within 5s
      - http.response_time.median: 1000  # 50% of requests should complete within 1s
      - http.codes.200: 85  # 85% success rate (some orders may fail due to stock/limits)
      - http.codes.201: 10  # Order creation success

scenarios:
  # High-volume order creation (RabbitMQ message flood)
  - name: "RabbitMQ Message Flood Test"
    weight: 60
    flow:
      # Create multiple orders rapidly
      - post:
          url: "/api/orders"
          name: "RabbitMQ Order Creation"
          headers:
            Authorization: "Bearer mock-token"
          json:
            username: "{{ $randomPick(usernames) }}"
            total_harga: "{{ $randomInt(50, 500) }}.99"
            items:
              - id_product: "{{ $randomPick(productIds) }}"
                qty: "{{ $randomInt(1, 10) }}"  # Higher quantities to test limits
                original_price: "{{ $randomInt(25, 250) }}.99"
                id_promo: "{{ $randomInt(1, 3) }}"
                deduct_price: "{{ $randomInt(0, 50) }}"
                total_price: "{{ $randomInt(25, 250) }}.99"
          capture:
            - json: "$.data.order_id"
              as: "orderId"
      - think: 0.1  # Minimal think time for rapid fire
      
      # Immediately create another order (stress queue)
      - post:
          url: "/api/orders"
          name: "RabbitMQ Rapid Order"
          headers:
            Authorization: "Bearer mock-token"
          json:
            username: "{{ $randomPick(usernames) }}"
            total_harga: "{{ $randomInt(100, 300) }}.99"
            items:
              - id_product: "{{ $randomPick(productIds) }}"
                qty: "{{ $randomInt(5, 15) }}"  # Test daily limits
                original_price: "{{ $randomInt(50, 150) }}.99"
                id_promo: null
                deduct_price: 0
                total_price: "{{ $randomInt(50, 150) }}.99"
      - think: 0.1

  # Stock validation stress (Product Service consumer)
  - name: "Stock Validation Message Test"
    weight: 25
    flow:
      # Create order with high quantity to trigger stock validation
      - post:
          url: "/api/orders"
          name: "Stock Validation Order"
          headers:
            Authorization: "Bearer mock-token"
          json:
            username: "{{ $randomPick(usernames) }}"
            total_harga: "999.99"
            items:
              - id_product: "{{ $randomPick(productIds) }}"
                qty: "{{ $randomInt(8, 12) }}"  # Near/over daily limit
                original_price: "99.99"
                id_promo: "{{ $randomInt(1, 3) }}"
                deduct_price: "10.00"
                total_price: "89.99"
          capture:
            - json: "$.data.order_id"
              as: "orderId"
      - think: 3  # Wait for message processing
      
      # Check if order was processed/cancelled
      - get:
          url: "/api/orders/{{ orderId }}"
          name: "Check Message Processing Result"
          headers:
            Authorization: "Bearer mock-token"
      - think: 1

  # Daily limit testing (RabbitMQ limit validation)
  - name: "Daily Limit Message Test"
    weight: 15
    flow:
      # Create multiple orders for same product to test daily limits
      - loop:
          count: 3
          over:
            - post:
                url: "/api/orders"
                name: "Daily Limit Test Order"
                headers:
                  Authorization: "Bearer mock-token"
                json:
                  username: "daily_limit_test@example.com"
                  total_harga: "{{ $randomInt(100, 200) }}.99"
                  items:
                    - id_product: 1  # Same product to trigger limit
                      qty: 5  # Consistent quantity
                      original_price: "{{ $randomInt(50, 100) }}.99"
                      id_promo: null
                      deduct_price: 0
                      total_price: "{{ $randomInt(50, 100) }}.99"
            - think: 0.5
      - think: 5  # Wait for all messages to process
